name: CI

on:
  push:
    branches:
      - main
    tags: "*"

  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, "refs/pull/") }}

jobs:
  run-tests:
    name: Julia ${{ matrix.julia-version }}, Python ${{ matrix.python-version }} (${{ matrix.os }}, ${{ matrix.arch }})

    strategy:
      fail-fast: false

      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest]
        arch: [x64]
        #julia-version: ["1.7", "1.8", "1.9", "1.10", "1.11"]
        julia-version: ["1.11"]
        # python-version: ["3.10", "3.11", "3.12", "3.13"]
        python-version: ["3.13"]

    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}

    env:
        codecov-os: "Linux"
        codecov-arch: x64
        codecov-julia-version: "1.11"
        codecov-python-version: "1.13"

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # --- Run Julia tests

      - name: Set up Julia environment
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.arch }}

      - name: Set up Julia caches
        uses: julia-actions/cache@v2
        with:
          cache-name: ${{ github.repository }}-${{ github.workflow }}-${{ github.job }}-julia-${{ hashFiles(".github/workflows/CI.yml") }}

      - name: Build package
        uses: julia-actions/julia-buildpkg@v1

      - name: Run tests
        uses: julia-actions/julia-runtest@v1

      - name: Process coverage data
        # Only run for "main" branch running on "Linux" with the latest version of Julia
        if: |
            github.ref_name == "main" &&
            runner.os == env.codecov-os &&
            matrix.arch == env.codecov-arch &&
            matrix.julia-version == env.codecov-julia-version

        uses: julia-actions/julia-processcoverage@v1
        with:
          directories: src

      - name: Upload code coverage data to codecov.io
        # Only run for "main" branch running on "Linux" with the latest version of Julia
        if: |
            github.ref_name == "main" &&
            runner.os == env.codecov-os &&
            matrix.arch == env.codecov-arch &&
            matrix.julia-version == env.codecov-julia-version

        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
          verbose: true

      # --- Run Python tests

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Load cached $HOME/.local
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: ${{ github.repository }}-${{ github.workflow }}-${{ github.job }}-dotlocal-${{ hashFiles(".github/workflows/CI.yml") }}

      - name: Install Python poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ github.repository }}-${{ github.workflow }}-${{ github.job }}-venv-${{ hashFiles("**/poetry.lock") }}

      - name: Install Python package dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != "true"
        run: poetry install --with test

      - name: Run tests
        run: |
          source $VENV
          poetry run pytest --cov-report=xml

      - name: Upload coverage reports to Codecov
        # Only run for 'main' branch running on 'Linux' with the latest version of Python
        if: |
            github.ref_name == 'main' &&
            runner.os == 'Linux' &&
            matrix.arch == env.codecov-arch &&
            matrix.python-version == env.codecov-python-version

        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true

  build-docs:
    name: Build Documentation

    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # --- Set up Julia

      - name: Set up Julia environment
        uses: julia-actions/setup-julia@v2
        with:
          version: "1.11"

      - name: Set up Julia caches
        uses: julia-actions/cache@v2
        with:
          cache-name: ${{ github.repository }}-${{ github.workflow }}-${{ github.job }}-julia-${{ hashFiles(".github/workflows/CI.yml") }}

      - name: Install Julia documentation generator dependencies
        run: julia --project=docs --color=yes -e "using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()"

      # --- Set up Python

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      # ------ Install Poetry

      - name: Load cached $HOME/.local
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: ${{ github.repository }}-${{ github.workflow }}-${{ github.job }}-dotlocal-${{ hashFiles(".github/workflows/CI.yml") }}

      - name: Install Python poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # ------ Install Python package dependencies

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ github.repository }}-${{ github.workflow }}-${{ github.job }}-venv-${{ hashFiles("**/poetry.lock") }}

      - name: Install package dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != "true"
        run: poetry install --with docs

      # --- Build and deploy documentation

      - name: Build and deploy documentation
        run: |
          julia --project=docs --color=yes --compile=min -O0 docs/make.jl
          poetry run pdoc --math docs/xtallography -o docs/build/python
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
